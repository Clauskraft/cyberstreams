import { useState, useEffect } from "react";
import {
  Shield,
  Target,
  Search,
  Play,
  Settings,
  AlertTriangle,
  CheckCircle,
  Clock,
  Activity,
  Zap,
  Network,
  Wifi,
  Globe,
  Lock,
  Eye,
  Brain,
  Terminal,
  FileText,
  Download,
  Loader,
} from "lucide-react";

interface PentestTool {
  name: string;
  description: string;
  command: string;
  purpose: string;
}

interface PentestPurpose {
  id: string;
  title: string;
  toolCount: number;
}

interface ScanResult {
  success: boolean;
  tool: string;
  command: string;
  output?: string;
  error?: string;
  timestamp: string;
}

const PentestModule = () => {
  const [purposes, setPurposes] = useState<PentestPurpose[]>([]);
  const [selectedPurpose, setSelectedPurpose] = useState<string>("");
  const [tools, setTools] = useState<PentestTool[]>([]);
  const [loading, setLoading] = useState(false);
  const [results, setResults] = useState<ScanResult[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [config, setConfig] = useState<any>(null);

  // Scan parameters
  const [scanParams, setScanParams] = useState({
    target: "",
    scanType: "basic",
    toolName: "",
    command: "",
    customCommand: "",
  });

  useEffect(() => {
    loadConfig();
    loadPurposes();
  }, []);

  useEffect(() => {
    if (selectedPurpose) {
      loadTools(selectedPurpose);
    }
  }, [selectedPurpose]);

  const loadConfig = async () => {
    try {
      const response = await fetch("/api/pentest/config");
      const data = await response.json();
      if (data.success) {
        setConfig(data.data);
      }
    } catch (error) {
      console.error("Failed to load pentest config:", error);
    }
  };

  const loadPurposes = async () => {
    try {
      const response = await fetch("/api/pentest/purposes");
      const data = await response.json();
      if (data.success) {
        setPurposes(data.data);
      }
    } catch (error) {
      console.error("Failed to load pentest purposes:", error);
    }
  };

  const loadTools = async (purpose: string) => {
    try {
      const response = await fetch(`/api/pentest/tools/${purpose}`);
      const data = await response.json();
      if (data.success) {
        setTools(data.data.tools || []);
      }
    } catch (error) {
      console.error("Failed to load pentest tools:", error);
    }
  };

  const executeQuickScan = async () => {
    if (!scanParams.target) return;

    setLoading(true);
    setError(null);

    try {
      const response = await fetch("/api/pentest/quick-scan", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          target: scanParams.target,
          scanType: scanParams.scanType,
        }),
      });

      const data = await response.json();
      if (data.success) {
        setResults((prev) => [data, ...prev]);
      } else {
        setError(data.error || "Scan failed");
      }
    } catch (error) {
      setError("Network error occurred");
    } finally {
      setLoading(false);
    }
  };

  const executeVulnerabilityAssessment = async () => {
    if (!scanParams.target) return;

    setLoading(true);
    setError(null);

    try {
      const response = await fetch("/api/pentest/vulnerability-assessment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          target: scanParams.target,
        }),
      });

      const data = await response.json();
      if (data.success) {
        setResults((prev) => [...data.scans, ...prev]);
      } else {
        setError(data.error || "Assessment failed");
      }
    } catch (error) {
      setError("Network error occurred");
    } finally {
      setLoading(false);
    }
  };

  const executeNetworkDiscovery = async () => {
    if (!scanParams.target) return;

    setLoading(true);
    setError(null);

    try {
      const response = await fetch("/api/pentest/network-discovery", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          network: scanParams.target,
        }),
      });

      const data = await response.json();
      if (data.success) {
        setResults((prev) => [...data.discovery, ...prev]);
      } else {
        setError(data.error || "Discovery failed");
      }
    } catch (error) {
      setError("Network error occurred");
    } finally {
      setLoading(false);
    }
  };

  const executeCustomCommand = async () => {
    if (!scanParams.target || !scanParams.customCommand) return;

    setLoading(true);
    setError(null);

    try {
      const response = await fetch("/api/pentest/execute", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          toolName: "custom",
          command: scanParams.customCommand,
          target: scanParams.target,
        }),
      });

      const data = await response.json();
      setResults((prev) => [data, ...prev]);
    } catch (error) {
      setError("Network error occurred");
    } finally {
      setLoading(false);
    }
  };

  const executeToolCommand = async (tool: PentestTool) => {
    if (!scanParams.target) return;

    setLoading(true);
    setError(null);

    try {
      const response = await fetch("/api/pentest/execute", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          toolName: tool.name,
          command: tool.command,
          target: scanParams.target,
        }),
      });

      const data = await response.json();
      setResults((prev) => [data, ...prev]);
    } catch (error) {
      setError("Network error occurred");
    } finally {
      setLoading(false);
    }
  };

  const clearResults = () => {
    setResults([]);
    setError(null);
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <Shield className="w-8 h-8 text-cyber-blue" />
          <div>
            <h1 className="text-2xl font-bold text-white">
              Penetration Testing Module
            </h1>
            <p className="text-gray-400">
              Automated Security Testing & Vulnerability Assessment
            </p>
          </div>
        </div>

        {config && (
          <div className="flex items-center space-x-2">
            <div className="flex items-center gap-1 px-2 py-1 rounded text-xs bg-green-500/20 text-green-400">
              <CheckCircle className="w-3 h-3" />
              {config.availablePurposes} Purposes
            </div>
            <div className="flex items-center gap-1 px-2 py-1 rounded text-xs bg-blue-500/20 text-blue-400">
              <Zap className="w-3 h-3" />
              {config.totalTools} Tools
            </div>
          </div>
        )}
      </div>

      {/* Quick Scan Controls */}
      <div className="bg-gray-900 rounded-lg p-6 border border-gray-700">
        <h2 className="text-lg font-semibold mb-4 flex items-center gap-2">
          <Target className="w-5 h-5" />
          Quick Security Scans
        </h2>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              Target
            </label>
            <input
              type="text"
              value={scanParams.target}
              onChange={(e) =>
                setScanParams({ ...scanParams, target: e.target.value })
              }
              className="w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded focus:outline-none focus:border-cyber-blue"
              placeholder="IP address, domain, or network range"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              Scan Type
            </label>
            <select
              value={scanParams.scanType}
              onChange={(e) =>
                setScanParams({ ...scanParams, scanType: e.target.value })
              }
              className="w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded focus:outline-none focus:border-cyber-blue"
            >
              <option value="basic">Basic Network Scan</option>
              <option value="aggressive">Aggressive Scan</option>
              <option value="udp">UDP Scan</option>
              <option value="web">Web Application Scan</option>
            </select>
          </div>
        </div>

        <div className="flex items-center justify-between">
          <div className="text-sm text-gray-400">
            {scanParams.scanType === "basic" &&
              "Basic port scan with OS detection"}
            {scanParams.scanType === "aggressive" &&
              "Comprehensive scan with scripts"}
            {scanParams.scanType === "udp" && "UDP port scan of top 1000 ports"}
            {scanParams.scanType === "web" && "Web server vulnerability scan"}
          </div>

          <div className="flex items-center space-x-2">
            <button
              onClick={executeQuickScan}
              disabled={loading || !scanParams.target}
              className="px-4 py-2 bg-cyber-blue hover:bg-cyber-blue/80 rounded text-sm flex items-center gap-2 disabled:opacity-50"
            >
              {loading ? (
                <Loader className="w-4 h-4 animate-spin" />
              ) : (
                <Search className="w-4 h-4" />
              )}
              Quick Scan
            </button>

            <button
              onClick={executeVulnerabilityAssessment}
              disabled={loading || !scanParams.target}
              className="px-4 py-2 bg-red-600 hover:bg-red-500 rounded text-sm flex items-center gap-2 disabled:opacity-50"
            >
              {loading ? (
                <Loader className="w-4 h-4 animate-spin" />
              ) : (
                <Shield className="w-4 h-4" />
              )}
              Vulnerability Assessment
            </button>

            <button
              onClick={executeNetworkDiscovery}
              disabled={loading || !scanParams.target}
              className="px-4 py-2 bg-green-600 hover:bg-green-500 rounded text-sm flex items-center gap-2 disabled:opacity-50"
            >
              {loading ? (
                <Loader className="w-4 h-4 animate-spin" />
              ) : (
                <Network className="w-4 h-4" />
              )}
              Network Discovery
            </button>
          </div>
        </div>
      </div>

      {/* Tool Selection */}
      <div className="bg-gray-900 rounded-lg p-6 border border-gray-700">
        <h2 className="text-lg font-semibold mb-4 flex items-center gap-2">
          <Settings className="w-5 h-5" />
          Pentest Tools by Purpose
        </h2>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              Purpose
            </label>
            <select
              value={selectedPurpose}
              onChange={(e) => setSelectedPurpose(e.target.value)}
              className="w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded focus:outline-none focus:border-cyber-blue"
            >
              <option value="">Select a purpose...</option>
              {purposes.map((purpose) => (
                <option key={purpose.id} value={purpose.id}>
                  {purpose.title} ({purpose.toolCount} tools)
                </option>
              ))}
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              Custom Command
            </label>
            <input
              type="text"
              value={scanParams.customCommand}
              onChange={(e) =>
                setScanParams({ ...scanParams, customCommand: e.target.value })
              }
              className="w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded focus:outline-none focus:border-cyber-blue"
              placeholder="nmap -sS -O {target}"
            />
          </div>
        </div>

        {selectedPurpose && tools.length > 0 && (
          <div className="space-y-3">
            <h3 className="font-medium text-white">Available Tools:</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {tools.map((tool, index) => (
                <div key={index} className="bg-gray-800 rounded p-4">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-medium text-white">{tool.name}</h4>
                    <button
                      onClick={() => executeToolCommand(tool)}
                      disabled={loading || !scanParams.target}
                      className="px-3 py-1 bg-purple-600 hover:bg-purple-500 rounded text-xs disabled:opacity-50"
                    >
                      Execute
                    </button>
                  </div>
                  <p className="text-sm text-gray-400 mb-2">
                    {tool.description}
                  </p>
                  <p className="text-xs text-gray-500 mb-2">
                    <strong>Purpose:</strong> {tool.purpose}
                  </p>
                  <code className="text-xs text-gray-300 bg-gray-700 px-2 py-1 rounded block">
                    {tool.command}
                  </code>
                </div>
              ))}
            </div>
          </div>
        )}

        {scanParams.customCommand && (
          <div className="mt-4 flex justify-end">
            <button
              onClick={executeCustomCommand}
              disabled={loading || !scanParams.target}
              className="px-4 py-2 bg-yellow-600 hover:bg-yellow-500 rounded text-sm flex items-center gap-2 disabled:opacity-50"
            >
              {loading ? (
                <Loader className="w-4 h-4 animate-spin" />
              ) : (
                <Terminal className="w-4 h-4" />
              )}
              Execute Custom Command
            </button>
          </div>
        )}
      </div>

      {/* Error Display */}
      {error && (
        <div className="bg-red-900/20 border border-red-500/20 rounded-lg p-4">
          <div className="flex items-center gap-2 text-red-400">
            <AlertTriangle className="w-5 h-5" />
            <span className="font-medium">Error</span>
          </div>
          <p className="text-red-300 mt-1">{error}</p>
        </div>
      )}

      {/* Results Display */}
      {results.length > 0 && (
        <div className="bg-gray-900 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-semibold flex items-center gap-2">
              <FileText className="w-5 h-5" />
              Scan Results ({results.length})
            </h2>
            <button
              onClick={clearResults}
              className="px-3 py-1 bg-gray-600 hover:bg-gray-500 rounded text-sm"
            >
              Clear Results
            </button>
          </div>

          <div className="space-y-4 max-h-96 overflow-y-auto">
            {results.map((result, index) => (
              <div key={index} className="bg-gray-800 rounded p-4">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <div
                      className={`w-2 h-2 rounded-full ${
                        result.success ? "bg-green-500" : "bg-red-500"
                      }`}
                    ></div>
                    <span className="font-medium text-white">
                      {result.tool}
                    </span>
                    <span className="text-xs text-gray-400">
                      {new Date(result.timestamp).toLocaleString()}
                    </span>
                  </div>
                  <div
                    className={`px-2 py-1 rounded text-xs ${
                      result.success
                        ? "bg-green-500/20 text-green-400"
                        : "bg-red-500/20 text-red-400"
                    }`}
                  >
                    {result.success ? "Success" : "Failed"}
                  </div>
                </div>

                <code className="text-xs text-gray-300 bg-gray-700 px-2 py-1 rounded block mb-2">
                  {result.command}
                </code>

                {result.output && (
                  <div className="bg-gray-700 rounded p-3">
                    <pre className="text-xs text-gray-300 whitespace-pre-wrap max-h-32 overflow-y-auto">
                      {result.output}
                    </pre>
                  </div>
                )}

                {result.error && (
                  <div className="bg-red-900/20 border border-red-500/20 rounded p-3 mt-2">
                    <pre className="text-xs text-red-300 whitespace-pre-wrap">
                      {result.error}
                    </pre>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default PentestModule;

