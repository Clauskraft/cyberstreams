import { exec } from "child_process";
import { promisify } from "util";
import logger from "./logger.js";

const execAsync = promisify(exec);

export default function createPentestModule() {
  // Pentest tool suggestions based on purpose
  const toolSuggestions = {
    reconnaissance: {
      title: "Reconnaissance & Information Gathering",
      tools: [
        {
          name: "nmap",
          description: "Network discovery and security auditing",
          command: "nmap -sS -O -sV -sC {target}",
          purpose: "Port scanning, OS detection, service enumeration",
        },
        {
          name: "masscan",
          description: "High-speed port scanner",
          command: "masscan -p1-65535 {target} --rate=1000",
          purpose: "Fast port scanning of large networks",
        },
        {
          name: "dig",
          description: "DNS lookup utility",
          command: "dig {domain} ANY",
          purpose: "DNS enumeration and information gathering",
        },
        {
          name: "whois",
          description: "Domain registration lookup",
          command: "whois {domain}",
          purpose: "Domain ownership and registration information",
        },
        {
          name: "sublist3r",
          description: "Subdomain enumeration tool",
          command: "sublist3r -d {domain}",
          purpose: "Discover subdomains",
        },
      ],
    },
    vulnerability_assessment: {
      title: "Vulnerability Assessment",
      tools: [
        {
          name: "nmap",
          description: "Vulnerability scanning with NSE scripts",
          command: "nmap --script vuln {target}",
          purpose: "Automated vulnerability detection",
        },
        {
          name: "nikto",
          description: "Web server scanner",
          command: "nikto -h {target}",
          purpose: "Web application vulnerability scanning",
        },
        {
          name: "sqlmap",
          description: "SQL injection testing tool",
          command: "sqlmap -u {url} --batch",
          purpose: "SQL injection detection and exploitation",
        },
        {
          name: "dirb",
          description: "Web content scanner",
          command: "dirb {url} /usr/share/wordlists/dirb/common.txt",
          purpose: "Directory and file enumeration",
        },
        {
          name: "gobuster",
          description: "Directory/file brute-forcing tool",
          command:
            "gobuster dir -u {url} -w /usr/share/wordlists/dirb/common.txt",
          purpose: "Web directory brute-forcing",
        },
      ],
    },
    network_analysis: {
      title: "Network Analysis & Traffic",
      tools: [
        {
          name: "wireshark",
          description: "Network protocol analyzer",
          command: "wireshark -i {interface}",
          purpose: "Network traffic analysis and packet inspection",
        },
        {
          name: "tcpdump",
          description: "Command-line packet analyzer",
          command: "tcpdump -i {interface} -w capture.pcap",
          purpose: "Packet capture and analysis",
        },
        {
          name: "netstat",
          description: "Network connections utility",
          command: "netstat -tulpn",
          purpose: "Active network connections and listening ports",
        },
        {
          name: "ss",
          description: "Socket statistics utility",
          command: "ss -tulpn",
          purpose: "Socket information and network statistics",
        },
        {
          name: "arp-scan",
          description: "ARP scanning tool",
          command: "arp-scan -l",
          purpose: "Local network discovery via ARP",
        },
      ],
    },
    wireless_security: {
      title: "Wireless Security Testing",
      tools: [
        {
          name: "airodump-ng",
          description: "Wireless network detector",
          command: "airodump-ng {interface}",
          purpose: "Wireless network discovery and monitoring",
        },
        {
          name: "aircrack-ng",
          description: "WiFi security auditing suite",
          command: "aircrack-ng -w /usr/share/wordlists/rockyou.txt {capture}",
          purpose: "WEP/WPA/WPA2 key recovery",
        },
        {
          name: "reaver",
          description: "WPS PIN attack tool",
          command: "reaver -i {interface} -b {bssid} -vv",
          purpose: "WPS PIN brute-force attack",
        },
        {
          name: "wifite",
          description: "Automated wireless attack tool",
          command: "wifite --kill",
          purpose: "Automated WiFi penetration testing",
        },
        {
          name: "kismet",
          description: "Wireless network detector and sniffer",
          command: "kismet -c {interface}",
          purpose: "Wireless network discovery and analysis",
        },
      ],
    },
    web_application: {
      title: "Web Application Security",
      tools: [
        {
          name: "burpsuite",
          description: "Web application security testing platform",
          command: "burpsuite",
          purpose: "Web application security testing and analysis",
        },
        {
          name: "owasp-zap",
          description: "OWASP Zed Attack Proxy",
          command: "zap.sh -daemon -port 8080",
          purpose: "Automated web application security scanner",
        },
        {
          name: "wfuzz",
          description: "Web application fuzzer",
          command: "wfuzz -w /usr/share/wordlists/dirb/common.txt {url}/FUZZ",
          purpose: "Web application fuzzing and parameter discovery",
        },
        {
          name: "commix",
          description: "Command injection testing tool",
          command: "commix -u {url}",
          purpose: "Command injection vulnerability testing",
        },
        {
          name: "xsser",
          description: "Cross-site scripting testing tool",
          command: "xsser --url={url}",
          purpose: "XSS vulnerability detection and exploitation",
        },
      ],
    },
    password_attacks: {
      title: "Password Attacks & Cracking",
      tools: [
        {
          name: "hydra",
          description: "Password brute-force tool",
          command:
            "hydra -l {username} -P /usr/share/wordlists/rockyou.txt {target} {service}",
          purpose: "Password brute-forcing against various services",
        },
        {
          name: "john",
          description: "Password cracking tool",
          command:
            "john --wordlist=/usr/share/wordlists/rockyou.txt {hashfile}",
          purpose: "Password hash cracking",
        },
        {
          name: "hashcat",
          description: "Advanced password recovery tool",
          command:
            "hashcat -m {hash_type} -a 0 {hashfile} /usr/share/wordlists/rockyou.txt",
          purpose: "High-performance password cracking",
        },
        {
          name: "medusa",
          description: "Parallel network login brute-forcer",
          command:
            "medusa -h {target} -u {username} -P /usr/share/wordlists/rockyou.txt -M {module}",
          purpose: "Parallel password brute-forcing",
        },
        {
          name: "crunch",
          description: "Wordlist generator",
          command:
            "crunch 8 8 -f /usr/share/crunch/charset.lst mixalpha-numeric",
          purpose: "Custom wordlist generation",
        },
      ],
    },
    social_engineering: {
      title: "Social Engineering & Phishing",
      tools: [
        {
          name: "setoolkit",
          description: "Social Engineering Toolkit",
          command: "setoolkit",
          purpose: "Social engineering attack framework",
        },
        {
          name: "gophish",
          description: "Open-source phishing framework",
          command: "gophish",
          purpose: "Phishing campaign management",
        },
        {
          name: "king-phisher",
          description: "Phishing campaign toolkit",
          command: "king-phisher",
          purpose: "Advanced phishing campaign creation",
        },
        {
          name: "beef",
          description: "Browser Exploitation Framework",
          command: "beef",
          purpose: "Browser-based attacks and exploitation",
        },
        {
          name: "maltego",
          description: "Open source intelligence and forensics",
          command: "maltego",
          purpose: "OSINT and link analysis",
        },
      ],
    },
    forensics: {
      title: "Digital Forensics & Analysis",
      tools: [
        {
          name: "volatility",
          description: "Memory forensics framework",
          command: "volatility -f {memory_dump} --profile={profile} pslist",
          purpose: "Memory dump analysis and forensics",
        },
        {
          name: "autopsy",
          description: "Digital forensics platform",
          command: "autopsy",
          purpose: "Digital forensics case management",
        },
        {
          name: "sleuthkit",
          description: "Digital forensics toolkit",
          command: "tsk_gettimes -i raw {image}",
          purpose: "File system analysis and forensics",
        },
        {
          name: "binwalk",
          description: "Firmware analysis tool",
          command: "binwalk {firmware}",
          purpose: "Firmware analysis and extraction",
        },
        {
          name: "strings",
          description: "String extraction utility",
          command: "strings {file}",
          purpose: "Extract printable strings from binary files",
        },
      ],
    },
  };

  // Execute pentest command
  async function executeCommand(toolName, command, target) {
    try {
      const fullCommand = command
        .replace(/{target}/g, target)
        .replace(/{url}/g, target);

      logger.info(`Executing pentest command: ${toolName} - ${fullCommand}`);

      const { stdout, stderr } = await execAsync(fullCommand, {
        timeout: 300000, // 5 minutes timeout
        maxBuffer: 1024 * 1024 * 10, // 10MB buffer
      });

      return {
        success: true,
        tool: toolName,
        command: fullCommand,
        output: stdout,
        error: stderr,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      logger.error(
        { err: error },
        `Failed to execute pentest command: ${toolName}`
      );
      return {
        success: false,
        tool: toolName,
        command: command,
        error: error.message,
        timestamp: new Date().toISOString(),
      };
    }
  }

  // Get tool suggestions based on purpose
  function getToolSuggestions(purpose) {
    return (
      toolSuggestions[purpose] || {
        title: "General Pentesting Tools",
        tools: Object.values(toolSuggestions).flatMap(
          (category) => category.tools
        ),
      }
    );
  }

  // Get all available purposes
  function getAvailablePurposes() {
    return Object.keys(toolSuggestions).map((key) => ({
      id: key,
      title: toolSuggestions[key].title,
      toolCount: toolSuggestions[key].tools.length,
    }));
  }

  // Quick scan function
  async function quickScan(target, scanType = "basic") {
    const scans = {
      basic: {
        name: "Basic Network Scan",
        command: "nmap -sS -O -sV {target}",
        description:
          "Basic port scan with OS detection and service enumeration",
      },
      aggressive: {
        name: "Aggressive Scan",
        command: "nmap -A -sS -sV -sC -O {target}",
        description: "Comprehensive scan with scripts and OS detection",
      },
      udp: {
        name: "UDP Scan",
        command: "nmap -sU --top-ports 1000 {target}",
        description: "UDP port scan of top 1000 ports",
      },
      web: {
        name: "Web Application Scan",
        command: "nikto -h {target}",
        description: "Web server vulnerability scan",
      },
    };

    const scan = scans[scanType];
    if (!scan) {
      return { success: false, error: "Invalid scan type" };
    }

    return await executeCommand("nmap", scan.command, target);
  }

  // Vulnerability assessment
  async function vulnerabilityAssessment(target) {
    const results = [];

    // Nmap vulnerability scan
    const nmapResult = await executeCommand(
      "nmap",
      "nmap --script vuln {target}",
      target
    );
    results.push(nmapResult);

    // Nikto web scan (if target is a web server)
    const niktoResult = await executeCommand(
      "nikto",
      "nikto -h {target}",
      target
    );
    results.push(niktoResult);

    return {
      success: true,
      target: target,
      scans: results,
      timestamp: new Date().toISOString(),
    };
  }

  // Network discovery
  async function networkDiscovery(network) {
    const results = [];

    // ARP scan for local network discovery
    const arpResult = await executeCommand("arp-scan", "arp-scan -l", network);
    results.push(arpResult);

    // Nmap ping sweep
    const pingResult = await executeCommand(
      "nmap",
      "nmap -sn {target}",
      network
    );
    results.push(pingResult);

    return {
      success: true,
      network: network,
      discovery: results,
      timestamp: new Date().toISOString(),
    };
  }

  // WiFi security assessment
  async function wifiSecurityAssessment(iface = "wlan0") {
    const results = [];

    // Airodump-ng for network discovery
    const airodumpResult = await executeCommand(
      "airodump-ng",
      "airodump-ng {interface}",
      iface
    );
    results.push(airodumpResult);

    return {
      success: true,
      interface: iface,
      assessment: results,
      timestamp: new Date().toISOString(),
    };
  }

  // Generate pentest report
  function generateReport(results) {
    const report = {
      title: "Penetration Testing Report",
      timestamp: new Date().toISOString(),
      summary: {
        totalScans: results.length,
        successfulScans: results.filter((r) => r.success).length,
        failedScans: results.filter((r) => !r.success).length,
      },
      findings: results.map((result) => ({
        tool: result.tool,
        success: result.success,
        command: result.command,
        output:
          result.output?.substring(0, 1000) +
          (result.output?.length > 1000 ? "..." : ""),
        error: result.error,
      })),
      recommendations: generateRecommendations(results),
    };

    return report;
  }

  // Generate security recommendations
  function generateRecommendations(results) {
    const recommendations = [];

    results.forEach((result) => {
      if (result.success && result.output) {
        const output = result.output.toLowerCase();

        if (output.includes("open") && output.includes("port")) {
          recommendations.push({
            severity: "medium",
            category: "Network Security",
            finding: "Open ports detected",
            recommendation: "Review and close unnecessary open ports",
          });
        }

        if (output.includes("vulnerable") || output.includes("exploit")) {
          recommendations.push({
            severity: "high",
            category: "Vulnerability Management",
            finding: "Potential vulnerabilities detected",
            recommendation: "Apply security patches and updates immediately",
          });
        }

        if (output.includes("weak") && output.includes("password")) {
          recommendations.push({
            severity: "high",
            category: "Access Control",
            finding: "Weak password policies detected",
            recommendation:
              "Implement strong password policies and multi-factor authentication",
          });
        }
      }
    });

    return recommendations;
  }

  return {
    // Core functions
    executeCommand,
    getToolSuggestions,
    getAvailablePurposes,

    // Automated scans
    quickScan,
    vulnerabilityAssessment,
    networkDiscovery,
    wifiSecurityAssessment,

    // Reporting
    generateReport,
    generateRecommendations,

    // Configuration
    isConfigured: () => true, // Basic pentest tools are usually available
    getConfig: () => ({
      availablePurposes: Object.keys(toolSuggestions).length,
      totalTools: Object.values(toolSuggestions).reduce(
        (sum, cat) => sum + cat.tools.length,
        0
      ),
    }),
  };
}
